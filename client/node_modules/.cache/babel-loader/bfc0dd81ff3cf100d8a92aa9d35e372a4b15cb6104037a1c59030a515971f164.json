{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState, useRef, useCallback } from 'react';\nimport { ACTIONS } from '../actions';\nimport socketInit from '../socket';\nimport freeice from 'freeice';\nimport { useStateWithCallback } from './useStateWithCallback';\nexport const useWebRTC = (roomId, user) => {\n  _s();\n  const [clients, setClients] = useStateWithCallback([]);\n  const audioElements = useRef({});\n  const connections = useRef({});\n  const socket = useRef(null);\n  const localMediaStream = useRef(null);\n  const clientsRef = useRef(null);\n  const addNewClient = useCallback((newClient, cb) => {\n    const lookingFor = clients.find(client => client.id === newClient.id);\n    if (lookingFor === undefined) {\n      setClients(existingClients => [...existingClients, newClient], cb);\n    }\n  }, [clients, setClients]);\n  useEffect(() => {\n    clientsRef.current = clients;\n  }, [clients]);\n  useEffect(() => {\n    const initChat = async () => {\n      socket.current = socketInit();\n      await captureMedia();\n      addNewClient({\n        ...user,\n        muted: true\n      }, () => {\n        const localElement = audioElements.current[user.id];\n        if (localElement) {\n          localElement.volume = 0;\n          localElement.srcObject = localMediaStream.current;\n        }\n      });\n      socket.current.on(ACTIONS.MUTE_INFO, _ref => {\n        let {\n          userId,\n          isMute\n        } = _ref;\n        handleSetMute(isMute, userId);\n      });\n      socket.current.on(ACTIONS.ADD_PEER, handleNewPeer);\n      socket.current.on(ACTIONS.REMOVE_PEER, handleRemovePeer);\n      socket.current.on(ACTIONS.ICE_CANDIDATE, handleIceCandidate);\n      socket.current.on(ACTIONS.SESSION_DESCRIPTION, setRemoteMedia);\n      socket.current.on(ACTIONS.MUTE, _ref2 => {\n        let {\n          peerId,\n          userId\n        } = _ref2;\n        handleSetMute(true, userId);\n      });\n      socket.current.on(ACTIONS.UNMUTE, _ref3 => {\n        let {\n          peerId,\n          userId\n        } = _ref3;\n        handleSetMute(false, userId);\n      });\n      socket.current.emit(ACTIONS.JOIN, {\n        roomId,\n        user\n      });\n      async function captureMedia() {\n        // Start capturing local audio stream.\n        localMediaStream.current = await navigator.mediaDevices.getUserMedia({\n          audio: true\n        });\n      }\n      async function handleNewPeer(_ref4) {\n        let {\n          peerId,\n          createOffer,\n          user: remoteUser\n        } = _ref4;\n        if (peerId in connections.current) {\n          return console.warn(`You are already connected with ${peerId} (${user.name})`);\n        }\n\n        // Store it to connections\n        connections.current[peerId] = new RTCPeerConnection({\n          iceServers: freeice()\n        });\n\n        // Handle new ice candidate on this peer connection\n        connections.current[peerId].onicecandidate = event => {\n          socket.current.emit(ACTIONS.RELAY_ICE, {\n            peerId,\n            icecandidate: event.candidate\n          });\n        };\n\n        // Handle on track event on this connection\n        connections.current[peerId].ontrack = _ref5 => {\n          let {\n            streams: [remoteStream]\n          } = _ref5;\n          addNewClient({\n            ...remoteUser,\n            muted: true\n          }, () => {\n            // get current users mute info\n            const currentUser = clientsRef.current.find(client => client.id === user.id);\n            if (currentUser) {\n              socket.current.emit(ACTIONS.MUTE_INFO, {\n                userId: user.id,\n                roomId,\n                isMute: currentUser.muted\n              });\n            }\n            if (audioElements.current[remoteUser.id]) {\n              audioElements.current[remoteUser.id].srcObject = remoteStream;\n            } else {\n              let settled = false;\n              const interval = setInterval(() => {\n                if (audioElements.current[remoteUser.id]) {\n                  audioElements.current[remoteUser.id].srcObject = remoteStream;\n                  settled = true;\n                }\n                if (settled) {\n                  clearInterval(interval);\n                }\n              }, 300);\n            }\n          });\n        };\n\n        // Add connection to peer connections track\n        localMediaStream.current.getTracks().forEach(track => {\n          connections.current[peerId].addTrack(track, localMediaStream.current);\n        });\n\n        // Create an offer if required\n        if (createOffer) {\n          const offer = await connections.current[peerId].createOffer();\n\n          // Set as local description\n          await connections.current[peerId].setLocalDescription(offer);\n\n          // send offer to the server\n          socket.current.emit(ACTIONS.RELAY_SDP, {\n            peerId,\n            sessionDescription: offer\n          });\n        }\n      }\n      async function handleRemovePeer(_ref6) {\n        let {\n          peerId,\n          userId\n        } = _ref6;\n        // Correction: peerID to peerId\n        if (connections.current[peerId]) {\n          connections.current[peerId].close();\n        }\n        delete connections.current[peerId];\n        delete audioElements.current[peerId];\n        setClients(list => list.filter(c => c.id !== userId));\n      }\n      async function handleIceCandidate(_ref7) {\n        let {\n          peerId,\n          icecandidate\n        } = _ref7;\n        if (icecandidate) {\n          connections.current[peerId].addIceCandidate(icecandidate);\n        }\n      }\n      async function setRemoteMedia(_ref8) {\n        let {\n          peerId,\n          sessionDescription: remoteSessionDescription\n        } = _ref8;\n        connections.current[peerId].setRemoteDescription(new RTCSessionDescription(remoteSessionDescription));\n\n        // If session descrition is offer then create an answer\n        if (remoteSessionDescription.type === 'offer') {\n          const connection = connections.current[peerId];\n          const answer = await connection.createAnswer();\n          connection.setLocalDescription(answer);\n          socket.current.emit(ACTIONS.RELAY_SDP, {\n            peerId,\n            sessionDescription: answer\n          });\n        }\n      }\n      async function handleSetMute(mute, userId) {\n        const clientIdx = clientsRef.current.map(client => client.id).indexOf(userId);\n        const allConnectedClients = JSON.parse(JSON.stringify(clientsRef.current));\n        if (clientIdx > -1) {\n          allConnectedClients[clientIdx].muted = mute;\n          setClients(allConnectedClients);\n        }\n      }\n    };\n    initChat();\n    return () => {\n      localMediaStream.current.getTracks().forEach(track => track.stop());\n      socket.current.emit(ACTIONS.LEAVE, {\n        roomId\n      });\n      for (let peerId in connections.current) {\n        connections.current[peerId].close();\n        delete connections.current[peerId];\n        delete audioElements.current[peerId];\n      }\n      socket.current.off(ACTIONS.ADD_PEER);\n      socket.current.off(ACTIONS.REMOVE_PEER);\n      socket.current.off(ACTIONS.ICE_CANDIDATE);\n      socket.current.off(ACTIONS.SESSION_DESCRIPTION);\n      socket.current.off(ACTIONS.MUTE);\n      socket.current.off(ACTIONS.UNMUTE);\n    };\n  }, []);\n  const provideRef = (instance, userId) => {\n    audioElements.current[userId] = instance;\n  };\n  const handleMute = (isMute, userId) => {\n    let settled = false;\n    if (userId === user.id) {\n      let interval = setInterval(() => {\n        if (localMediaStream.current) {\n          localMediaStream.current.getTracks()[0].enabled = !isMute;\n          if (isMute) {\n            socket.current.emit(ACTIONS.MUTE, {\n              roomId,\n              userId: user.id\n            });\n          } else {\n            socket.current.emit(ACTIONS.UNMUTE, {\n              roomId,\n              userId: user.id\n            });\n          }\n          settled = true;\n        }\n        if (settled) {\n          clearInterval(interval);\n        }\n      }, 200);\n    }\n  };\n  return {\n    clients,\n    provideRef,\n    handleMute\n  };\n};\n_s(useWebRTC, \"3TvHJpyJNNvMGFf9ptUfUUM9qII=\", false, function () {\n  return [useStateWithCallback];\n});","map":{"version":3,"names":["useEffect","useState","useRef","useCallback","ACTIONS","socketInit","freeice","useStateWithCallback","useWebRTC","roomId","user","_s","clients","setClients","audioElements","connections","socket","localMediaStream","clientsRef","addNewClient","newClient","cb","lookingFor","find","client","id","undefined","existingClients","current","initChat","captureMedia","muted","localElement","volume","srcObject","on","MUTE_INFO","_ref","userId","isMute","handleSetMute","ADD_PEER","handleNewPeer","REMOVE_PEER","handleRemovePeer","ICE_CANDIDATE","handleIceCandidate","SESSION_DESCRIPTION","setRemoteMedia","MUTE","_ref2","peerId","UNMUTE","_ref3","emit","JOIN","navigator","mediaDevices","getUserMedia","audio","_ref4","createOffer","remoteUser","console","warn","name","RTCPeerConnection","iceServers","onicecandidate","event","RELAY_ICE","icecandidate","candidate","ontrack","_ref5","streams","remoteStream","currentUser","settled","interval","setInterval","clearInterval","getTracks","forEach","track","addTrack","offer","setLocalDescription","RELAY_SDP","sessionDescription","_ref6","close","list","filter","c","_ref7","addIceCandidate","_ref8","remoteSessionDescription","setRemoteDescription","RTCSessionDescription","type","connection","answer","createAnswer","mute","clientIdx","map","indexOf","allConnectedClients","JSON","parse","stringify","stop","LEAVE","off","provideRef","instance","handleMute","enabled"],"sources":["C:/Users/pc/Desktop/production/code/client/src/hooks/useWebRTC.js"],"sourcesContent":["import { useEffect, useState, useRef, useCallback } from 'react';\nimport { ACTIONS } from '../actions';\nimport socketInit from '../socket';\nimport freeice from 'freeice';\nimport { useStateWithCallback } from './useStateWithCallback';\n\nexport const useWebRTC = (roomId, user) => {\n    const [clients, setClients] = useStateWithCallback([]);\n    const audioElements = useRef({});\n    const connections = useRef({});\n    const socket = useRef(null);\n    const localMediaStream = useRef(null);\n    const clientsRef = useRef(null);\n\n    const addNewClient = useCallback(\n        (newClient, cb) => {\n            const lookingFor = clients.find(\n                (client) => client.id === newClient.id\n            );\n\n            if (lookingFor === undefined) {\n                setClients(\n                    (existingClients) => [...existingClients, newClient],\n                    cb\n                );\n            }\n        },\n        [clients, setClients]\n    );\n\n    useEffect(() => {\n        clientsRef.current = clients;\n    }, [clients]);\n\n    useEffect(() => {\n        const initChat = async () => {\n            socket.current = socketInit();\n            await captureMedia();\n            addNewClient({ ...user, muted: true }, () => {\n                const localElement = audioElements.current[user.id];\n                if (localElement) {\n                    localElement.volume = 0;\n                    localElement.srcObject = localMediaStream.current;\n                }\n            });\n            socket.current.on(ACTIONS.MUTE_INFO, ({ userId, isMute }) => {\n                handleSetMute(isMute, userId);\n            });\n\n            socket.current.on(ACTIONS.ADD_PEER, handleNewPeer);\n            socket.current.on(ACTIONS.REMOVE_PEER, handleRemovePeer);\n            socket.current.on(ACTIONS.ICE_CANDIDATE, handleIceCandidate);\n            socket.current.on(ACTIONS.SESSION_DESCRIPTION, setRemoteMedia);\n            socket.current.on(ACTIONS.MUTE, ({ peerId, userId }) => {\n                handleSetMute(true, userId);\n            });\n            socket.current.on(ACTIONS.UNMUTE, ({ peerId, userId }) => {\n                handleSetMute(false, userId);\n            });\n            socket.current.emit(ACTIONS.JOIN, {\n                roomId,\n                user,\n            });\n\n            async function captureMedia() {\n                // Start capturing local audio stream.\n                localMediaStream.current =\n                    await navigator.mediaDevices.getUserMedia({\n                        audio: true,\n                    });\n            }\n            async function handleNewPeer({\n                peerId,\n                createOffer,\n                user: remoteUser,\n            }) {\n                if (peerId in connections.current) {\n                    return console.warn(\n                        `You are already connected with ${peerId} (${user.name})`\n                    );\n                }\n\n                // Store it to connections\n                connections.current[peerId] = new RTCPeerConnection({\n                    iceServers: freeice(),\n                });\n\n                // Handle new ice candidate on this peer connection\n                connections.current[peerId].onicecandidate = (event) => {\n                    socket.current.emit(ACTIONS.RELAY_ICE, {\n                        peerId,\n                        icecandidate: event.candidate,\n                    });\n                };\n\n                // Handle on track event on this connection\n                connections.current[peerId].ontrack = ({\n                    streams: [remoteStream],\n                }) => {\n                    addNewClient({ ...remoteUser, muted: true }, () => {\n                        // get current users mute info\n                        const currentUser = clientsRef.current.find(\n                            (client) => client.id === user.id\n                        );\n                        if (currentUser) {\n                            socket.current.emit(ACTIONS.MUTE_INFO, {\n                                userId: user.id,\n                                roomId,\n                                isMute: currentUser.muted,\n                            });\n                        }\n                        if (audioElements.current[remoteUser.id]) {\n                            audioElements.current[remoteUser.id].srcObject =\n                                remoteStream;\n                        } else {\n                            let settled = false;\n                            const interval = setInterval(() => {\n                                if (audioElements.current[remoteUser.id]) {\n                                    audioElements.current[\n                                        remoteUser.id\n                                    ].srcObject = remoteStream;\n                                    settled = true;\n                                }\n\n                                if (settled) {\n                                    clearInterval(interval);\n                                }\n                            }, 300);\n                        }\n                    });\n                };\n\n                // Add connection to peer connections track\n                localMediaStream.current.getTracks().forEach((track) => {\n                    connections.current[peerId].addTrack(\n                        track,\n                        localMediaStream.current\n                    );\n                });\n\n                // Create an offer if required\n                if (createOffer) {\n                    const offer = await connections.current[\n                        peerId\n                    ].createOffer();\n\n                    // Set as local description\n                    await connections.current[peerId].setLocalDescription(\n                        offer\n                    );\n\n                    // send offer to the server\n                    socket.current.emit(ACTIONS.RELAY_SDP, {\n                        peerId,\n                        sessionDescription: offer,\n                    });\n                }\n            }\n            async function handleRemovePeer({ peerId, userId }) {\n                // Correction: peerID to peerId\n                if (connections.current[peerId]) {\n                    connections.current[peerId].close();\n                }\n\n                delete connections.current[peerId];\n                delete audioElements.current[peerId];\n                setClients((list) => list.filter((c) => c.id !== userId));\n            }\n            async function handleIceCandidate({ peerId, icecandidate }) {\n                if (icecandidate) {\n                    connections.current[peerId].addIceCandidate(icecandidate);\n                }\n            }\n            async function setRemoteMedia({\n                peerId,\n                sessionDescription: remoteSessionDescription,\n            }) {\n                connections.current[peerId].setRemoteDescription(\n                    new RTCSessionDescription(remoteSessionDescription)\n                );\n\n                // If session descrition is offer then create an answer\n                if (remoteSessionDescription.type === 'offer') {\n                    const connection = connections.current[peerId];\n\n                    const answer = await connection.createAnswer();\n                    connection.setLocalDescription(answer);\n\n                    socket.current.emit(ACTIONS.RELAY_SDP, {\n                        peerId,\n                        sessionDescription: answer,\n                    });\n                }\n            }\n            async function handleSetMute(mute, userId) {\n                const clientIdx = clientsRef.current\n                    .map((client) => client.id)\n                    .indexOf(userId);\n                const allConnectedClients = JSON.parse(\n                    JSON.stringify(clientsRef.current)\n                );\n                if (clientIdx > -1) {\n                    allConnectedClients[clientIdx].muted = mute;\n                    setClients(allConnectedClients);\n                }\n            }\n        };\n\n        initChat();\n        return () => {\n            localMediaStream.current\n                .getTracks()\n                .forEach((track) => track.stop());\n            socket.current.emit(ACTIONS.LEAVE, { roomId });\n            for (let peerId in connections.current) {\n                connections.current[peerId].close();\n                delete connections.current[peerId];\n                delete audioElements.current[peerId];\n            }\n            socket.current.off(ACTIONS.ADD_PEER);\n            socket.current.off(ACTIONS.REMOVE_PEER);\n            socket.current.off(ACTIONS.ICE_CANDIDATE);\n            socket.current.off(ACTIONS.SESSION_DESCRIPTION);\n            socket.current.off(ACTIONS.MUTE);\n            socket.current.off(ACTIONS.UNMUTE);\n        };\n    }, []);\n\n    const provideRef = (instance, userId) => {\n        audioElements.current[userId] = instance;\n    };\n\n    const handleMute = (isMute, userId) => {\n        let settled = false;\n\n        if (userId === user.id) {\n            let interval = setInterval(() => {\n                if (localMediaStream.current) {\n                    localMediaStream.current.getTracks()[0].enabled = !isMute;\n                    if (isMute) {\n                        socket.current.emit(ACTIONS.MUTE, {\n                            roomId,\n                            userId: user.id,\n                        });\n                    } else {\n                        socket.current.emit(ACTIONS.UNMUTE, {\n                            roomId,\n                            userId: user.id,\n                        });\n                    }\n                    settled = true;\n                }\n                if (settled) {\n                    clearInterval(interval);\n                }\n            }, 200);\n        }\n    };\n\n    return {\n        clients,\n        provideRef,\n        handleMute,\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}